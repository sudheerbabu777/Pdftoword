#!/usr/bin/env node
var PDFParser = require("pdf2json");
var pdfParser = new PDFParser();
const { execSync } = require("child_process");
const { Document, Packer, Paragraph, Image, Media } = require("docx");
const fs = require("fs");
const _cliProgress = require("cli-progress");
let pageNumber;

const args = require("minimist")(process.argv.slice(2));

let inputFile;
if (args._[0]) inputFile = args._[0];
else {
  console.error("There is no PDF file given!");
  process.exit();
}

let output;
if (args.o != undefined && args.o) output = args.o;
else {
  output = inputFile.replace(".pdf", ".docx");
  console.info(`Writing to ${output}`);
}

pdfParser.on("pdfParser_dataReady", function(data) {
  console.info("Number of pages:", (pageNumber = data.formImage.Pages.length));

  const sizes = data.formImage.Pages.map(p => {
    const mult = 1000 / data.formImage.Width;
    return { w: data.formImage.Width * mult, h: p.Height * mult };
  });

  const doc = new Document();

  const bar = new _cliProgress.SingleBar(
    {},
    _cliProgress.Presets.shades_classic
  );
  bar.start(pageNumber, 0);

  for (let i = 0; i < pageNumber; i++) {
    execSync(
      `convert -density 150 -trim ${inputFile}[${i}] -quality 75 .testforpdf-${i}.jpg`
    ).toString();

    const par = new Paragraph(
      Media.addImage(
        doc,
        fs.readFileSync(`.testforpdf-${i}.jpg`),
        sizes[i].w,
        sizes[i].h
      )
    );
    par.pageBreak();
    doc.addSection({
      children: [par]
    });

    execSync(`rm .testforpdf-${i}.jpg`);
    bar.update(i + 1);
  }

  bar.stop();

  Packer.toBuffer(doc).then(buffer => {
    fs.writeFileSync(output, buffer);
  });
});
// pdfParser.on('pdfParser_dataError', _.bind(_onPFBinDataError, self));

pdfParser.loadPDF(inputFile);

// doc.addSection({
//     children: [image],
// });
